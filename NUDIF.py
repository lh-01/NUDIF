from gurobipy import Model, GRB, quicksum
import numpy as np

# 实验数据 N=4
S = M = 4
N = 4
Oi = [8, 6, 9, 7]
Memj = [8, 10, 9, 9]
Reqi = [5, 6, 7, 6]

B = np.array([
    [0, 562, 708, 345],
    [562, 0, 823, 412],
    [708, 823, 0, 678],
    [345, 412, 678, 0]
])

T_comp = np.array([
    [2.31, 1.87, 2.45, 2.02],
    [1.94, 2.62, 1.79, 2.35],
    [2.58, 1.68, 2.21, 1.90],
    [1.85, 2.49, 2.07, 1.74]
])

# # 实验数据 N=5
# S = M = 4
# N = 5
#
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 9, 9, 8]
# Reqi = [5, 6, 7, 6]
#
# B = np.array([
#     [0, 562, 708, 345, 590],
#     [562, 0, 823, 412, 678],
#     [708, 823, 0, 678, 745],
#     [345, 412, 678, 0, 510],
#     [590, 678, 745, 510, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15],
#     [1.94, 2.62, 1.79, 2.35, 2.20],
#     [2.58, 1.68, 2.21, 1.90, 2.00],
#     [1.85, 2.49, 2.07, 1.74, 1.92]
# ])

# # 实验数据 N=6
# S = M = 4
# N = 6
#
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 9, 9, 8, 9]
# Reqi = [5, 6, 7, 6]
#
# B = np.array([
#     [0, 562, 708, 345, 590, 620],
#     [562, 0, 823, 412, 678, 730],
#     [708, 823, 0, 678, 745, 810],
#     [345, 412, 678, 0, 510, 590],
#     [590, 678, 745, 510, 0, 680],
#     [620, 730, 810, 590, 680, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15, 2.05],
#     [1.94, 2.62, 1.79, 2.35, 2.20, 1.73],
#     [2.58, 1.68, 2.21, 1.90, 2.00, 1.87],
#     [1.85, 2.49, 2.07, 1.74, 1.92, 1.98]
# ])

# # 实验数据 N=7
# S = M = 4
# N = 7
#
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 9, 9, 8, 9, 8]
# Reqi = [5, 6, 7, 6]
#
# B = np.array([
#     [0, 562, 708, 345, 590, 620, 655],
#     [562, 0, 823, 412, 678, 730, 780],
#     [708, 823, 0, 678, 745, 810, 850],
#     [345, 412, 678, 0, 510, 590, 625],
#     [590, 678, 745, 510, 0, 680, 710],
#     [620, 730, 810, 590, 680, 0, 720],
#     [655, 780, 850, 625, 710, 720, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15, 2.05, 1.88],
#     [1.94, 2.62, 1.79, 2.35, 2.20, 1.73, 1.72],
#     [2.58, 1.68, 2.21, 1.90, 2.00, 1.87, 1.82],
#     [1.85, 2.49, 2.07, 1.74, 1.92, 1.98, 1.98]
# ])

# # 实验数据 N=8
# S = M = 4
# N = 8
#
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 9, 9, 8, 9, 8, 9]
# Reqi = [5, 6, 7, 6]
#
# B = np.array([
#     [0, 562, 708, 345, 590, 620, 655, 700],
#     [562, 0, 823, 412, 678, 730, 780, 820],
#     [708, 823, 0, 678, 745, 810, 850, 890],
#     [345, 412, 678, 0, 510, 590, 625, 675],
#     [590, 678, 745, 510, 0, 680, 710, 760],
#     [620, 730, 810, 590, 680, 0, 720, 770],
#     [655, 780, 850, 625, 710, 720, 0, 750],
#     [700, 820, 890, 675, 760, 770, 750, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15, 2.05, 1.88, 1.75],
#     [1.94, 2.62, 1.79, 2.35, 2.20, 1.73, 1.72, 1.70],
#     [2.58, 1.68, 2.21, 1.90, 2.00, 1.87, 1.82, 1.75],
#     [1.85, 2.49, 2.07, 1.74, 1.92, 1.98, 1.98, 1.90]
# ])

# S = M = 4
# N = 9
#
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 10, 8, 10, 9, 8, 9, 8]
# Reqi = [5, 6, 7, 6]
#
# B = np.array([
#     [0, 562, 708, 345, 590, 620, 655, 700, 730],
#     [562, 0, 823, 412, 678, 730, 780, 820, 850],
#     [708, 823, 0, 678, 745, 810, 850, 890, 920],
#     [345, 412, 678, 0, 510, 590, 625, 675, 700],
#     [590, 678, 745, 510, 0, 680, 710, 760, 790],
#     [620, 730, 810, 590, 680, 0, 720, 770, 800],
#     [655, 780, 850, 625, 710, 720, 0, 750, 770],
#     [700, 820, 890, 675, 760, 770, 750, 0, 780],
#     [730, 850, 920, 700, 790, 800, 770, 780, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15, 2.05, 1.88, 1.75, 1.80],
#     [1.94, 2.62, 1.79, 2.35, 2.20, 1.73, 1.72, 1.70, 1.75],
#     [2.58, 1.68, 2.21, 1.90, 2.00, 1.87, 1.82, 1.75, 1.85],
#     [1.85, 2.49, 2.07, 1.74, 1.92, 1.98, 1.98, 1.90, 1.95]
# ])

# S = M = 4
# N = 10
#
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 10, 8, 10, 9, 8, 9, 8, 9]
# Reqi = [5, 6, 7, 6]
#
# B = np.array([
#     [0, 562, 708, 345, 590, 620, 655, 700, 730, 690],
#     [562, 0, 823, 412, 678, 730, 780, 820, 850, 610],
#     [708, 823, 0, 678, 745, 810, 850, 890, 920, 670],
#     [345, 412, 678, 0, 510, 590, 625, 675, 700, 630],
#     [590, 678, 745, 510, 0, 680, 710, 760, 790, 620],
#     [620, 730, 810, 590, 680, 0, 720, 770, 800, 660],
#     [655, 780, 850, 625, 710, 720, 0, 750, 770, 680],
#     [700, 820, 890, 675, 760, 770, 750, 0, 780, 650],
#     [730, 850, 920, 700, 790, 800, 770, 780, 0, 640],
#     [690, 610, 670, 630, 620, 660, 680, 650, 640, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15, 2.05, 1.88, 1.75, 1.80, 1.05],
#     [1.94, 2.62, 1.79, 2.35, 2.20, 1.73, 1.72, 1.70, 1.75, 1.15],
#     [2.58, 1.68, 2.21, 1.90, 2.00, 1.87, 1.82, 1.75, 1.85, 1.10],
#     [1.85, 2.49, 2.07, 1.74, 1.92, 1.98, 1.98, 1.90, 1.95, 1.00]
# ])

# S = M = 4
# N = 11
#
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 10, 8, 10, 9, 8, 9, 8, 9, 10]
# Reqi = [5, 6, 7, 6]
#
# B = np.array([
#     [0, 562, 708, 345, 590, 620, 655, 700, 730, 690, 660],
#     [562, 0, 823, 412, 678, 730, 780, 820, 850, 610, 650],
#     [708, 823, 0, 678, 745, 810, 850, 890, 920, 670, 680],
#     [345, 412, 678, 0, 510, 590, 625, 675, 700, 630, 600],
#     [590, 678, 745, 510, 0, 680, 710, 760, 790, 620, 590],
#     [620, 730, 810, 590, 680, 0, 720, 770, 800, 660, 680],
#     [655, 780, 850, 625, 710, 720, 0, 750, 770, 680, 690],
#     [700, 820, 890, 675, 760, 770, 750, 0, 780, 650, 640],
#     [730, 850, 920, 700, 790, 800, 770, 780, 0, 640, 610],
#     [690, 610, 670, 630, 620, 660, 680, 650, 640, 0, 620],
#     [660, 650, 680, 600, 590, 680, 690, 640, 610, 620, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15, 2.05, 1.88, 1.75, 1.80, 1.05, 1.10],
#     [1.94, 2.62, 1.79, 2.35, 2.20, 1.73, 1.72, 1.70, 1.75, 1.15, 1.20],
#     [2.58, 1.68, 2.21, 1.90, 2.00, 1.87, 1.82, 1.75, 1.85, 1.10, 1.12],
#     [1.85, 2.49, 2.07, 1.74, 1.92, 1.98, 1.98, 1.90, 1.95, 1.00, 1.05]
# ])

# S = M = 4
# N = 12
#
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 10, 8, 10, 9, 8, 9, 8, 9, 10, 9]
# Reqi = [5, 6, 7, 6]
#
# B = np.array([
#     [0, 562, 708, 345, 590, 620, 655, 700, 730, 690, 660, 680],
#     [562, 0, 823, 412, 678, 730, 780, 820, 850, 610, 650, 670],
#     [708, 823, 0, 678, 745, 810, 850, 890, 920, 670, 680, 690],
#     [345, 412, 678, 0, 510, 590, 625, 675, 700, 630, 600, 610],
#     [590, 678, 745, 510, 0, 680, 710, 760, 790, 620, 590, 580],
#     [620, 730, 810, 590, 680, 0, 720, 770, 800, 660, 680, 690],
#     [655, 780, 850, 625, 710, 720, 0, 750, 770, 680, 690, 700],
#     [700, 820, 890, 675, 760, 770, 750, 0, 780, 650, 640, 630],
#     [730, 850, 920, 700, 790, 800, 770, 780, 0, 640, 610, 620],
#     [690, 610, 670, 630, 620, 660, 680, 650, 640, 0, 620, 630],
#     [660, 650, 680, 600, 590, 680, 690, 640, 610, 620, 0, 640],
#     [680, 670, 690, 610, 580, 690, 700, 630, 620, 630, 640, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15, 2.05, 1.88, 1.75, 1.80, 1.05, 1.10, 1.12],
#     [1.94, 2.62, 1.79, 2.35, 2.20, 1.73, 1.72, 1.70, 1.75, 1.15, 1.20, 1.25],
#     [2.58, 1.68, 2.21, 1.90, 2.00, 1.87, 1.82, 1.75, 1.85, 1.10, 1.12, 1.18],
#     [1.85, 2.49, 2.07, 1.74, 1.92, 1.98, 1.98, 1.90, 1.95, 1.00, 1.05, 1.08]
# ])

# S = M = 4
# N = 13
#
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 10, 8, 10, 9, 8, 9, 8, 9, 10, 9, 10]
# Reqi = [5, 6, 7, 6]
#
# B = np.array([
#     [0, 562, 708, 345, 590, 620, 655, 700, 730, 690, 660, 680, 700],
#     [562, 0, 823, 412, 678, 730, 780, 820, 850, 610, 650, 670, 690],
#     [708, 823, 0, 678, 745, 810, 850, 890, 920, 670, 680, 690, 710],
#     [345, 412, 678, 0, 510, 590, 625, 675, 700, 630, 600, 610, 620],
#     [590, 678, 745, 510, 0, 680, 710, 760, 790, 620, 590, 580, 600],
#     [620, 730, 810, 590, 680, 0, 720, 770, 800, 660, 680, 690, 710],
#     [655, 780, 850, 625, 710, 720, 0, 750, 770, 680, 690, 700, 730],
#     [700, 820, 890, 675, 760, 770, 750, 0, 780, 650, 640, 630, 650],
#     [730, 850, 920, 700, 790, 800, 770, 780, 0, 640, 610, 620, 640],
#     [690, 610, 670, 630, 620, 660, 680, 650, 640, 0, 620, 630, 640],
#     [660, 650, 680, 600, 590, 680, 690, 640, 610, 620, 0, 640, 650],
#     [680, 670, 690, 610, 580, 690, 700, 630, 620, 630, 640, 0, 660],
#     [700, 690, 710, 620, 600, 710, 730, 650, 640, 650, 660, 660, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15, 2.05, 1.88, 1.75, 1.80, 1.05, 1.10, 1.12, 1.13],
#     [1.94, 2.62, 1.79, 2.35, 2.20, 1.73, 1.72, 1.70, 1.75, 1.15, 1.20, 1.25, 1.30],
#     [2.58, 1.68, 2.21, 1.90, 2.00, 1.87, 1.82, 1.75, 1.85, 1.10, 1.12, 1.18, 1.20],
#     [1.85, 2.49, 2.07, 1.74, 1.92, 1.98, 1.98, 1.90, 1.95, 1.00, 1.05, 1.08, 1.12]
# ])

# S = M = 4
# N = 14
#
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 10, 8, 10, 9, 8, 9, 8, 9, 10, 9, 10, 10]
# Reqi = [5, 6, 7, 6]
#
# B = np.array([
#     [0, 562, 708, 345, 590, 620, 655, 700, 730, 690, 660, 680, 700, 710],
#     [562, 0, 823, 412, 678, 730, 780, 820, 850, 610, 650, 670, 690, 710],
#     [708, 823, 0, 678, 745, 810, 850, 890, 920, 670, 680, 690, 710, 730],
#     [345, 412, 678, 0, 510, 590, 625, 675, 700, 630, 600, 610, 620, 640],
#     [590, 678, 745, 510, 0, 680, 710, 760, 790, 620, 590, 580, 600, 620],
#     [620, 730, 810, 590, 680, 0, 720, 770, 800, 660, 680, 690, 710, 730],
#     [655, 780, 850, 625, 710, 720, 0, 750, 770, 680, 690, 700, 730, 750],
#     [700, 820, 890, 675, 760, 770, 750, 0, 780, 650, 640, 630, 650, 670],
#     [730, 850, 920, 700, 790, 800, 770, 780, 0, 640, 610, 620, 640, 660],
#     [690, 610, 670, 630, 620, 660, 680, 650, 640, 0, 620, 630, 640, 650],
#     [660, 650, 680, 600, 590, 680, 690, 640, 610, 620, 0, 640, 650, 660],
#     [680, 670, 690, 610, 580, 690, 700, 630, 620, 630, 640, 0, 660, 670],
#     [700, 690, 710, 620, 600, 710, 730, 650, 640, 650, 660, 660, 0, 680],
#     [710, 700, 730, 640, 620, 730, 750, 670, 660, 650, 660, 670, 680, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15, 2.05, 1.88, 1.75, 1.80, 1.05, 1.10, 1.12, 1.13, 1.14],
#     [1.94, 2.62, 1.79, 2.35, 2.20, 1.73, 1.72, 1.70, 1.75, 1.15, 1.20, 1.25, 1.30, 1.35],
#     [2.58, 1.68, 2.21, 1.90, 2.00, 1.87, 1.82, 1.75, 1.85, 1.10, 1.12, 1.18, 1.20, 1.22],
#     [1.85, 2.49, 2.07, 1.74, 1.92, 1.98, 1.98, 1.90, 1.95, 1.00, 1.05, 1.08, 1.12, 1.15]
# ])

# S = M = 4
# N = 15
#
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 10, 8, 10, 9, 8, 9, 8, 9, 10, 9, 10, 10, 9]
# Reqi = [5, 6, 7, 6]
#
# B = np.array([
#     [0, 562, 708, 345, 590, 620, 655, 700, 730, 690, 660, 680, 700, 710, 720],
#     [562, 0, 823, 412, 678, 730, 780, 820, 850, 610, 650, 670, 690, 710, 725],
#     [708, 823, 0, 678, 745, 810, 850, 890, 920, 670, 680, 690, 710, 730, 740],
#     [345, 412, 678, 0, 510, 590, 625, 675, 700, 630, 600, 610, 620, 640, 655],
#     [590, 678, 745, 510, 0, 680, 710, 760, 790, 620, 590, 580, 600, 620, 635],
#     [620, 730, 810, 590, 680, 0, 720, 770, 800, 660, 680, 690, 710, 730, 745],
#     [655, 780, 850, 625, 710, 720, 0, 750, 770, 680, 690, 700, 730, 750, 765],
#     [700, 820, 890, 675, 760, 770, 750, 0, 780, 650, 640, 630, 650, 670, 685],
#     [730, 850, 920, 700, 790, 800, 770, 780, 0, 640, 610, 620, 640, 660, 675],
#     [690, 610, 670, 630, 620, 660, 680, 650, 640, 0, 620, 630, 640, 650, 665],
#     [660, 650, 680, 600, 590, 680, 690, 640, 610, 620, 0, 640, 650, 660, 675],
#     [680, 670, 690, 610, 580, 690, 700, 630, 620, 630, 640, 0, 660, 670, 685],
#     [700, 690, 710, 620, 600, 710, 730, 650, 640, 650, 660, 660, 0, 680, 695],
#     [710, 700, 730, 640, 620, 730, 750, 670, 660, 650, 660, 670, 680, 0, 705],
#     [720, 710, 740, 655, 635, 745, 765, 685, 675, 665, 675, 685, 695, 705, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15, 2.05, 1.88, 1.75, 1.80, 1.05, 1.10, 1.12, 1.13, 1.14, 1.15],
#     [1.94, 2.62, 1.79, 2.35, 2.20, 1.73, 1.72, 1.70, 1.75, 1.15, 1.20, 1.25, 1.30, 1.35, 1.40],
#     [2.58, 1.68, 2.21, 1.90, 2.00, 1.87, 1.82, 1.75, 1.85, 1.10, 1.12, 1.18, 1.20, 1.22, 1.25],
#     [1.85, 2.49, 2.07, 1.74, 1.92, 1.98, 1.98, 1.90, 1.95, 1.00, 1.05, 1.08, 1.12, 1.15, 1.18]
# ])

# S = M = 4
# N = 16
#
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 10, 8, 10, 9, 8, 9, 8, 9, 10, 9, 10, 10, 9, 10]
# Reqi = [5, 6, 7, 6]
#
# B = np.array([
#     [0, 562, 708, 345, 590, 620, 655, 700, 730, 690, 660, 680, 700, 710, 720, 730],
#     [562, 0, 823, 412, 678, 730, 780, 820, 850, 610, 650, 670, 690, 710, 725, 735],
#     [708, 823, 0, 678, 745, 810, 850, 890, 920, 670, 680, 690, 710, 730, 740, 750],
#     [345, 412, 678, 0, 510, 590, 625, 675, 700, 630, 600, 610, 620, 640, 655, 665],
#     [590, 678, 745, 510, 0, 680, 710, 760, 790, 620, 590, 580, 600, 620, 635, 645],
#     [620, 730, 810, 590, 680, 0, 720, 770, 800, 660, 680, 690, 710, 730, 745, 755],
#     [655, 780, 850, 625, 710, 720, 0, 750, 770, 680, 690, 700, 730, 750, 765, 775],
#     [700, 820, 890, 675, 760, 770, 750, 0, 780, 650, 640, 630, 650, 670, 685, 695],
#     [730, 850, 920, 700, 790, 800, 770, 780, 0, 640, 610, 620, 640, 660, 675, 685],
#     [690, 610, 670, 630, 620, 660, 680, 650, 640, 0, 620, 630, 640, 650, 665, 675],
#     [660, 650, 680, 600, 590, 680, 690, 640, 610, 620, 0, 640, 650, 660, 675, 685],
#     [680, 670, 690, 610, 580, 690, 700, 630, 620, 630, 640, 0, 660, 670, 685, 695],
#     [700, 690, 710, 620, 600, 710, 730, 650, 640, 650, 660, 660, 0, 680, 695, 705],
#     [710, 700, 730, 640, 620, 730, 750, 670, 660, 650, 660, 670, 680, 0, 705, 715],
#     [720, 710, 740, 655, 635, 745, 765, 685, 675, 665, 675, 685, 695, 705, 0, 725],
#     [730, 725, 740, 665, 645, 755, 775, 695, 685, 675, 685, 695, 705, 715, 725, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15, 2.05, 1.88, 1.75, 1.80, 1.05, 1.10, 1.12, 1.13, 1.14, 1.15, 1.16],
#     [1.94, 2.62, 1.79, 2.35, 2.20, 1.73, 1.72, 1.70, 1.75, 1.15, 1.20, 1.25, 1.30, 1.35, 1.40, 1.45],
#     [2.58, 1.68, 2.21, 1.90, 2.00, 1.87, 1.82, 1.75, 1.85, 1.10, 1.12, 1.18, 1.20, 1.22, 1.25, 1.30],
#     [1.85, 2.49, 2.07, 1.74, 1.92, 1.98, 1.98, 1.90, 1.95, 1.00, 1.05, 1.08, 1.12, 1.15, 1.18, 1.20]
# ])

# S = M = 4
# N = 17
#
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 10, 8, 10, 9, 8, 9, 8, 9, 10, 9, 10, 10, 9, 10, 9]  # 新增第17个设备的内存
# Reqi = [5, 6, 7, 6]
# B = np.array([
#     [0, 562, 708, 345, 590, 620, 655, 700, 730, 690, 660, 680, 700, 710, 720, 730, 740],
#     [562, 0, 823, 412, 678, 730, 780, 820, 850, 610, 650, 670, 690, 710, 725, 735, 750],
#     [708, 823, 0, 678, 745, 810, 850, 890, 920, 670, 680, 690, 710, 730, 740, 750, 765],
#     [345, 412, 678, 0, 510, 590, 625, 675, 700, 630, 600, 610, 620, 640, 655, 665, 675],
#     [590, 678, 745, 510, 0, 680, 710, 760, 790, 620, 590, 580, 600, 620, 635, 645, 660],
#     [620, 730, 810, 590, 680, 0, 720, 770, 800, 660, 680, 690, 710, 730, 745, 755, 770],
#     [655, 780, 850, 625, 710, 720, 0, 750, 770, 680, 690, 700, 730, 750, 765, 775, 785],
#     [700, 820, 890, 675, 760, 770, 750, 0, 780, 650, 640, 630, 650, 670, 685, 695, 710],
#     [730, 850, 920, 700, 790, 800, 770, 780, 0, 640, 610, 620, 640, 660, 675, 685, 695],
#     [690, 610, 670, 630, 620, 660, 680, 650, 640, 0, 620, 630, 640, 650, 665, 675, 685],
#     [660, 650, 680, 600, 590, 680, 690, 640, 610, 620, 0, 640, 650, 660, 675, 685, 700],
#     [680, 670, 690, 610, 580, 690, 700, 630, 620, 630, 640, 0, 660, 670, 685, 695, 710],
#     [700, 690, 710, 620, 600, 710, 730, 650, 640, 650, 660, 660, 0, 680, 695, 705, 720],
#     [710, 700, 730, 640, 620, 730, 750, 670, 660, 650, 660, 670, 680, 0, 705, 715, 730],
#     [720, 710, 740, 655, 635, 745, 765, 685, 675, 665, 675, 685, 695, 705, 0, 725, 740],
#     [730, 725, 750, 665, 645, 755, 775, 695, 685, 675, 685, 695, 705, 715, 725, 0, 750],
#     [740, 750, 765, 675, 660, 770, 785, 710, 695, 685, 700, 710, 720, 730, 740, 750, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15, 2.05, 1.88, 1.75, 1.80, 1.05, 1.10, 1.12, 1.13, 1.14, 1.15, 1.16, 1.18],
#     [1.94, 2.62, 1.79, 2.35, 2.20, 1.73, 1.72, 1.70, 1.75, 1.15, 1.20, 1.25, 1.30, 1.35, 1.40, 1.45, 1.48],
#     [2.58, 1.68, 2.21, 1.90, 2.00, 1.87, 1.82, 1.75, 1.85, 1.10, 1.12, 1.18, 1.20, 1.22, 1.25, 1.30, 1.33],
#     [1.85, 2.49, 2.07, 1.74, 1.92, 1.98, 1.98, 1.90, 1.95, 1.00, 1.05, 1.08, 1.12, 1.15, 1.18, 1.20, 1.22]
# ])

# S = M = 4
# N = 18
#
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 10, 8, 10, 9, 8, 9, 8, 9, 10, 9, 10, 10, 9, 10, 9, 10]
#
# Reqi = [5, 6, 7, 6]
#
# B = np.array([
#     [0, 562, 708, 345, 590, 620, 655, 700, 730, 690, 660, 680, 700, 710, 720, 730, 740, 650],
#     [562, 0, 823, 412, 678, 730, 780, 820, 850, 610, 650, 670, 690, 710, 725, 735, 750, 660],
#     [708, 823, 0, 678, 745, 810, 850, 890, 920, 670, 680, 690, 710, 730, 740, 750, 765, 670],
#     [345, 412, 678, 0, 510, 590, 625, 675, 700, 630, 600, 610, 620, 640, 655, 665, 675, 580],
#     [590, 678, 745, 510, 0, 680, 710, 760, 790, 620, 590, 580, 600, 620, 635, 645, 660, 570],
#     [620, 730, 810, 590, 680, 0, 720, 770, 800, 660, 680, 690, 710, 730, 745, 755, 770, 680],
#     [655, 780, 850, 625, 710, 720, 0, 750, 770, 680, 690, 700, 730, 750, 765, 775, 785, 690],
#     [700, 820, 890, 675, 760, 770, 750, 0, 780, 650, 640, 630, 650, 670, 685, 695, 710, 620],
#     [730, 850, 920, 700, 790, 800, 770, 780, 0, 640, 610, 620, 640, 660, 675, 685, 695, 605],
#     [690, 610, 670, 630, 620, 660, 680, 650, 640, 0, 620, 630, 640, 650, 665, 675, 685, 590],
#     [660, 650, 680, 600, 590, 680, 690, 640, 610, 620, 0, 640, 650, 660, 675, 685, 700, 610],
#     [680, 670, 690, 610, 580, 690, 700, 630, 620, 630, 640, 0, 660, 670, 685, 695, 710, 620],
#     [700, 690, 710, 620, 600, 710, 730, 650, 640, 650, 660, 660, 0, 680, 695, 705, 720, 630],
#     [710, 700, 730, 640, 620, 730, 750, 670, 660, 650, 660, 670, 680, 0, 705, 715, 730, 640],
#     [720, 710, 740, 655, 635, 745, 765, 685, 675, 665, 675, 685, 695, 705, 0, 725, 740, 650],
#     [730, 725, 750, 665, 645, 755, 775, 695, 685, 675, 685, 695, 705, 715, 725, 0, 750, 660],
#     [740, 750, 765, 675, 660, 770, 785, 710, 695, 685, 700, 710, 720, 730, 740, 750, 0, 670],
#     [750, 760, 770, 680, 670, 780, 790, 720, 705, 690, 710, 720, 730, 740, 750, 760, 770, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15, 2.05, 1.88, 1.75, 1.80, 1.05, 1.10, 1.12, 1.13, 1.14, 1.15, 1.16, 1.18, 1.08],
#     [1.94, 2.62, 1.79, 2.35, 2.20, 1.73, 1.72, 1.70, 1.75, 1.15, 1.20, 1.25, 1.30, 1.35, 1.40, 1.45, 1.48, 1.22],
#     [2.58, 1.68, 2.21, 1.90, 2.00, 1.87, 1.82, 1.75, 1.85, 1.10, 1.12, 1.18, 1.20, 1.22, 1.25, 1.30, 1.33, 1.15],
#     [1.85, 2.49, 2.07, 1.74, 1.92, 1.98, 1.98, 1.90, 1.95, 1.00, 1.05, 1.08, 1.12, 1.15, 1.18, 1.20, 1.22, 1.09]
# ])

# S = M = 4
# N = 19
#
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 10, 8, 10, 9, 8, 9, 8, 9, 10, 9, 10, 10, 9, 10, 9, 10, 8]
# Reqi = [5, 6, 7, 6]
#
# B = np.array([
#     [0, 562, 708, 345, 590, 620, 655, 700, 730, 690, 660, 680, 700, 710, 720, 730, 740, 650, 700],
#     [562, 0, 823, 412, 678, 730, 780, 820, 850, 610, 650, 670, 690, 710, 725, 735, 750, 660, 715],
#     [708, 823, 0, 678, 745, 810, 850, 890, 920, 670, 680, 690, 710, 730, 740, 750, 765, 670, 730],
#     [345, 412, 678, 0, 510, 590, 625, 675, 700, 630, 600, 610, 620, 640, 655, 665, 675, 580, 650],
#     [590, 678, 745, 510, 0, 680, 710, 760, 790, 620, 590, 580, 600, 620, 635, 645, 660, 570, 640],
#     [620, 730, 810, 590, 680, 0, 720, 770, 800, 660, 680, 690, 710, 730, 745, 755, 770, 680, 740],
#     [655, 780, 850, 625, 710, 720, 0, 750, 770, 680, 690, 700, 730, 750, 765, 775, 785, 690, 760],
#     [700, 820, 890, 675, 760, 770, 750, 0, 780, 650, 640, 630, 650, 670, 685, 695, 710, 620, 770],
#     [730, 850, 920, 700, 790, 800, 770, 780, 0, 640, 610, 620, 640, 660, 675, 685, 695, 605, 780],
#     [690, 610, 670, 630, 620, 660, 680, 650, 640, 0, 620, 630, 640, 650, 665, 675, 685, 590, 670],
#     [660, 650, 680, 600, 590, 680, 690, 640, 610, 620, 0, 640, 650, 660, 675, 685, 700, 610, 680],
#     [680, 670, 690, 610, 580, 690, 700, 630, 620, 630, 640, 0, 660, 670, 685, 695, 710, 620, 690],
#     [700, 690, 710, 620, 600, 710, 730, 650, 640, 650, 660, 660, 0, 680, 695, 705, 720, 630, 700],
#     [710, 700, 730, 640, 620, 730, 750, 670, 660, 650, 660, 670, 680, 0, 705, 715, 730, 640, 710],
#     [720, 710, 740, 655, 635, 745, 765, 685, 675, 665, 675, 685, 695, 705, 0, 725, 740, 650, 720],
#     [730, 725, 750, 665, 645, 755, 775, 695, 685, 675, 685, 695, 705, 715, 725, 0, 750, 660, 730],
#     [740, 750, 765, 675, 660, 770, 785, 710, 695, 685, 700, 710, 720, 730, 740, 750, 0, 670, 740],
#     [750, 760, 770, 680, 670, 780, 790, 720, 705, 690, 710, 720, 730, 740, 750, 760, 770, 0, 750],
#     [700, 715, 730, 650, 640, 740, 760, 770, 780, 670, 680, 690, 700, 710, 720, 730, 740, 750, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15, 2.05, 1.88, 1.75, 1.80, 1.05, 1.10, 1.12, 1.13, 1.14, 1.15, 1.16, 1.18, 1.08, 1.12],
#     [1.94, 2.62, 1.79, 2.35, 2.20, 1.73, 1.72, 1.70, 1.75, 1.15, 1.20, 1.25, 1.30, 1.35, 1.40, 1.45, 1.48, 1.22, 1.28],
#     [2.58, 1.68, 2.21, 1.90, 2.00, 1.87, 1.82, 1.75, 1.85, 1.10, 1.12, 1.18, 1.20, 1.22, 1.25, 1.30, 1.33, 1.15, 1.20],
#     [1.85, 2.49, 2.07, 1.74, 1.92, 1.98, 1.98, 1.90, 1.95, 1.00, 1.05, 1.08, 1.12, 1.15, 1.18, 1.20, 1.22, 1.09, 1.15]
# ])

# S = M = 4
# N = 20
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 10, 8, 10, 9, 8, 9, 8, 9, 10, 9, 10, 10, 9, 10, 9, 10, 8, 9]
# Reqi = [5, 6, 7, 6]
#
# B = np.array([
#     [0, 562, 708, 345, 590, 620, 655, 700, 730, 690, 660, 680, 700, 710, 720, 730, 740, 650, 700, 800],
#     [562, 0, 823, 412, 678, 730, 780, 820, 850, 610, 650, 670, 690, 710, 725, 735, 750, 660, 715, 810],
#     [708, 823, 0, 678, 745, 810, 850, 890, 920, 670, 680, 690, 710, 730, 740, 750, 765, 670, 730, 820],
#     [345, 412, 678, 0, 510, 590, 625, 675, 700, 630, 600, 610, 620, 640, 655, 665, 675, 580, 650, 740],
#     [590, 678, 745, 510, 0, 680, 710, 760, 790, 620, 590, 580, 600, 620, 635, 645, 660, 570, 640, 750],
#     [620, 730, 810, 590, 680, 0, 720, 770, 800, 660, 680, 690, 710, 730, 745, 755, 770, 680, 740, 760],
#     [655, 780, 850, 625, 710, 720, 0, 750, 770, 680, 690, 700, 730, 750, 765, 775, 785, 690, 760, 770],
#     [700, 820, 890, 675, 760, 770, 750, 0, 780, 650, 640, 630, 650, 670, 685, 695, 710, 620, 770, 780],
#     [730, 850, 920, 700, 790, 800, 770, 780, 0, 640, 610, 620, 640, 660, 675, 685, 695, 605, 780, 790],
#     [690, 610, 670, 630, 620, 660, 680, 650, 640, 0, 620, 630, 640, 650, 665, 675, 685, 590, 670, 690],
#     [660, 650, 680, 600, 590, 680, 690, 640, 610, 620, 0, 640, 650, 660, 675, 685, 700, 610, 680, 700],
#     [680, 670, 690, 610, 580, 690, 700, 630, 620, 630, 640, 0, 660, 670, 685, 695, 710, 620, 690, 710],
#     [700, 690, 710, 620, 600, 710, 730, 650, 640, 650, 660, 660, 0, 680, 695, 705, 720, 630, 700, 720],
#     [710, 700, 730, 640, 620, 730, 750, 670, 660, 650, 660, 670, 680, 0, 705, 715, 730, 640, 710, 730],
#     [720, 710, 740, 655, 635, 745, 765, 685, 675, 665, 675, 685, 695, 705, 0, 725, 740, 650, 720, 740],
#     [730, 725, 750, 665, 645, 755, 775, 695, 685, 675, 685, 695, 705, 715, 725, 0, 750, 660, 730, 750],
#     [740, 750, 765, 675, 660, 770, 785, 710, 695, 685, 700, 710, 720, 730, 740, 750, 0, 670, 740, 760],
#     [750, 760, 770, 680, 670, 780, 790, 720, 705, 690, 710, 720, 730, 740, 750, 760, 770, 0, 750, 770],
#     [700, 715, 730, 650, 640, 740, 760, 770, 780, 670, 680, 690, 700, 710, 720, 730, 740, 750, 0, 760],
#     [800, 810, 820, 740, 750, 760, 770, 780, 790, 690, 700, 710, 720, 730, 740, 750, 760, 770, 760, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15, 2.05, 1.88, 1.75, 1.80, 1.05, 1.10, 1.12, 1.13, 1.14, 1.15, 1.16, 1.18, 1.08, 1.12, 1.15],
#     [1.94, 2.62, 1.79, 2.35, 2.20, 1.73, 1.72, 1.70, 1.75, 1.15, 1.20, 1.25, 1.30, 1.35, 1.40, 1.45, 1.48, 1.22, 1.28, 1.35],
#     [2.58, 1.68, 2.21, 1.90, 2.00, 1.87, 1.82, 1.75, 1.85, 1.10, 1.12, 1.18, 1.20, 1.22, 1.25, 1.30, 1.33, 1.15, 1.20, 1.25],
#     [1.85, 2.49, 2.07, 1.74, 1.92, 1.98, 1.98, 1.90, 1.95, 1.00, 1.05, 1.08, 1.12, 1.15, 1.18, 1.20, 1.22, 1.09, 1.15, 1.20]
# ])

# S = M = 4
# N = 21
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 10, 8, 10, 9, 8, 9, 8, 9, 10, 9, 10, 10, 9, 10, 9, 10, 8, 9, 10]
# Reqi = [5, 6, 7, 6]
#
# B = np.array([
#     [0, 562, 708, 345, 590, 620, 655, 700, 730, 690, 660, 680, 700, 710, 720, 730, 740, 650, 700, 800, 710],
#     [562, 0, 823, 412, 678, 730, 780, 820, 850, 610, 650, 670, 690, 710, 725, 735, 750, 660, 715, 810, 710],
#     [708, 823, 0, 678, 745, 810, 850, 890, 920, 670, 680, 690, 710, 730, 740, 750, 765, 670, 730, 820, 720],
#     [345, 412, 678, 0, 510, 590, 625, 675, 700, 630, 600, 610, 620, 640, 655, 665, 675, 580, 650, 740, 690],
#     [590, 678, 745, 510, 0, 680, 710, 760, 790, 620, 590, 580, 600, 620, 635, 645, 660, 570, 640, 750, 730],
#     [620, 730, 810, 590, 680, 0, 720, 770, 800, 660, 680, 690, 710, 730, 745, 755, 770, 680, 740, 760, 740],
#     [655, 780, 850, 625, 710, 720, 0, 750, 770, 680, 690, 700, 730, 750, 765, 775, 785, 690, 760, 770, 750],
#     [700, 820, 890, 675, 760, 770, 750, 0, 780, 650, 640, 630, 650, 670, 685, 695, 710, 620, 770, 780, 770],
#     [730, 850, 920, 700, 790, 800, 770, 780, 0, 640, 610, 620, 640, 660, 675, 685, 695, 605, 780, 790, 780],
#     [690, 610, 670, 630, 620, 660, 680, 650, 640, 0, 620, 630, 640, 650, 665, 675, 685, 590, 670, 690, 680],
#     [660, 650, 680, 600, 590, 680, 690, 640, 610, 620, 0, 640, 650, 660, 675, 685, 700, 610, 680, 700, 690],
#     [680, 670, 690, 610, 580, 690, 700, 630, 620, 630, 640, 0, 660, 670, 685, 695, 710, 620, 690, 710, 700],
#     [700, 690, 710, 620, 600, 710, 730, 650, 640, 650, 660, 660, 0, 680, 695, 705, 720, 630, 700, 720, 710],
#     [710, 700, 730, 640, 620, 730, 750, 670, 660, 650, 660, 670, 680, 0, 705, 715, 730, 640, 710, 730, 720],
#     [720, 710, 740, 655, 635, 745, 765, 685, 675, 665, 675, 685, 695, 705, 0, 725, 740, 650, 720, 740, 730],
#     [730, 725, 750, 665, 645, 755, 775, 695, 685, 675, 685, 695, 705, 715, 725, 0, 750, 660, 730, 750, 740],
#     [740, 750, 765, 675, 660, 770, 785, 710, 695, 685, 700, 710, 720, 730, 740, 750, 0, 670, 740, 760, 750],
#     [750, 760, 770, 680, 670, 780, 790, 720, 705, 690, 710, 720, 730, 740, 750, 760, 770, 0, 750, 770, 760],
#     [700, 715, 730, 650, 640, 740, 760, 770, 780, 670, 680, 690, 700, 710, 720, 730, 740, 750, 0, 760, 740],
#     [800, 810, 820, 740, 750, 760, 770, 780, 790, 690, 700, 710, 720, 730, 740, 750, 760, 770, 760, 0, 780],
#     [710, 710, 720, 690, 730, 740, 750, 770, 780, 680, 690, 700, 710, 720, 730, 740, 750, 760, 740, 780, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15, 2.05, 1.88, 1.75, 1.80, 1.05, 1.10, 1.12, 1.13, 1.14, 1.15, 1.16, 1.18, 1.08, 1.12, 1.15, 1.20],
#     [1.94, 2.62, 1.79, 2.35, 2.20, 1.73, 1.72, 1.70, 1.75, 1.15, 1.20, 1.25, 1.30, 1.35, 1.40, 1.45, 1.48, 1.22, 1.28, 1.35, 1.30],
#     [2.58, 1.68, 2.21, 1.90, 2.00, 1.87, 1.82, 1.75, 1.85, 1.10, 1.12, 1.18, 1.20, 1.22, 1.25, 1.30, 1.33, 1.15, 1.20, 1.25, 1.28],
#     [1.85, 2.49, 2.07, 1.74, 1.92, 1.98, 1.98, 1.90, 1.95, 1.00, 1.05, 1.08, 1.12, 1.15, 1.18, 1.20, 1.22, 1.09, 1.15, 1.20, 1.18],
#     [2.10, 2.35, 2.30, 1.85, 2.10, 1.95, 2.10, 2.05, 2.00, 1.10, 1.15, 1.20, 1.25, 1.30, 1.35, 1.40, 1.45, 1.10, 1.25, 1.30, 1.40]
# ])

# S = M = 4
# N = 22
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 10, 8, 10, 9, 8, 9, 8, 9, 10, 9, 10, 10, 9, 10, 9, 10, 8, 9, 10, 9]
# Reqi = [5, 6, 7, 6]
#
# B = np.array([
#     [0, 562, 708, 345, 590, 620, 655, 700, 730, 690, 660, 680, 700, 710, 720, 730, 740, 650, 700, 800, 710, 750],
#     [562, 0, 823, 412, 678, 730, 780, 820, 850, 610, 650, 670, 690, 710, 725, 735, 750, 660, 715, 810, 710, 740],
#     [708, 823, 0, 678, 745, 810, 850, 890, 920, 670, 680, 690, 710, 730, 740, 750, 765, 670, 730, 820, 720, 735],
#     [345, 412, 678, 0, 510, 590, 625, 675, 700, 630, 600, 610, 620, 640, 655, 665, 675, 580, 650, 740, 690, 715],
#     [590, 678, 745, 510, 0, 680, 710, 760, 790, 620, 590, 580, 600, 620, 635, 645, 660, 570, 640, 750, 730, 755],
#     [620, 730, 810, 590, 680, 0, 720, 770, 800, 660, 680, 690, 710, 730, 745, 755, 770, 680, 740, 760, 740, 765],
#     [655, 780, 850, 625, 710, 720, 0, 750, 770, 680, 690, 700, 730, 750, 765, 775, 785, 690, 760, 770, 750, 775],
#     [700, 820, 890, 675, 760, 770, 750, 0, 780, 650, 640, 630, 650, 670, 685, 695, 710, 620, 770, 780, 770, 785],
#     [730, 850, 920, 700, 790, 800, 770, 780, 0, 640, 610, 620, 640, 660, 675, 685, 695, 605, 780, 790, 780, 795],
#     [690, 610, 670, 630, 620, 660, 680, 650, 640, 0, 620, 630, 640, 650, 665, 675, 685, 590, 670, 690, 680, 695],
#     [660, 650, 680, 600, 590, 680, 690, 640, 610, 620, 0, 640, 650, 660, 675, 685, 700, 610, 680, 700, 690, 705],
#     [680, 670, 690, 610, 580, 690, 700, 630, 620, 630, 640, 0, 660, 670, 685, 695, 710, 620, 690, 710, 700, 715],
#     [700, 690, 710, 620, 600, 710, 730, 650, 640, 650, 660, 660, 0, 680, 695, 705, 720, 630, 700, 720, 710, 725],
#     [710, 700, 730, 640, 620, 730, 750, 670, 660, 650, 660, 670, 680, 0, 705, 715, 730, 640, 710, 730, 720, 735],
#     [720, 710, 740, 655, 635, 745, 765, 685, 675, 665, 675, 685, 695, 705, 0, 725, 740, 650, 720, 740, 730, 745],
#     [730, 725, 750, 665, 645, 755, 775, 695, 685, 675, 685, 695, 705, 715, 725, 0, 750, 660, 730, 750, 740, 755],
#     [740, 750, 765, 675, 660, 770, 785, 710, 695, 685, 700, 710, 720, 730, 740, 750, 0, 670, 740, 760, 750, 765],
#     [750, 760, 770, 680, 670, 780, 790, 720, 705, 690, 710, 720, 730, 740, 750, 760, 770, 0, 750, 770, 760, 780],
#     [700, 715, 730, 650, 640, 740, 760, 770, 780, 670, 680, 690, 700, 710, 720, 730, 740, 750, 0, 760, 740, 755],
#     [800, 810, 820, 740, 750, 760, 770, 780, 790, 690, 700, 710, 720, 730, 740, 750, 760, 770, 760, 0, 780, 795],
#     [710, 710, 720, 690, 730, 740, 750, 770, 780, 680, 690, 700, 710, 720, 730, 740, 750, 760, 740, 780, 0, 780],
#     [750, 740, 735, 715, 755, 765, 775, 785, 795, 695, 705, 715, 725, 735, 745, 755, 765, 780, 760, 795, 780, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15, 2.05, 1.88, 1.75, 1.80, 1.05, 1.10, 1.12, 1.13, 1.14, 1.15, 1.16, 1.18, 1.08, 1.12, 1.15, 1.20, 1.02],
#     [1.94, 2.62, 1.79, 2.35, 2.20, 1.73, 1.72, 1.70, 1.75, 1.15, 1.20, 1.25, 1.30, 1.35, 1.40, 1.45, 1.48, 1.22, 1.28, 1.35, 1.30, 1.08],
#     [2.58, 1.68, 2.21, 1.90, 2.00, 1.87, 1.82, 1.75, 1.85, 1.10, 1.12, 1.18, 1.20, 1.22, 1.25, 1.30, 1.33, 1.15, 1.20, 1.25, 1.28, 1.00],
#     [1.85, 2.49, 2.07, 1.74, 1.92, 1.98, 1.98, 1.90, 1.95, 1.00, 1.05, 1.08, 1.12, 1.15, 1.18, 1.20, 1.22, 1.09, 1.15, 1.20, 1.18, 1.05],
#     [2.10, 2.35, 2.30, 1.85, 2.10, 1.95, 2.10, 2.05, 2.00, 1.10, 1.15, 1.20, 1.25, 1.30, 1.35, 1.40, 1.45, 1.10, 1.25, 1.30, 1.40, 1.05]
# ])

# S = M = 4
# N = 22
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 10, 8, 10, 9, 8, 9, 8, 9, 10, 9, 10, 10, 9, 10, 9, 10, 8, 9, 10, 9]
# Reqi = [5, 6, 7, 6]
#
# B = np.array([
#     [0, 562, 708, 345, 590, 620, 655, 700, 730, 690, 660, 680, 700, 710, 720, 730, 740, 650, 700, 800, 710, 750],
#     [562, 0, 823, 412, 678, 730, 780, 820, 850, 610, 650, 670, 690, 710, 725, 735, 750, 660, 715, 810, 710, 740],
#     [708, 823, 0, 678, 745, 810, 850, 890, 920, 670, 680, 690, 710, 730, 740, 750, 765, 670, 730, 820, 720, 735],
#     [345, 412, 678, 0, 510, 590, 625, 675, 700, 630, 600, 610, 620, 640, 655, 665, 675, 580, 650, 740, 690, 715],
#     [590, 678, 745, 510, 0, 680, 710, 760, 790, 620, 590, 580, 600, 620, 635, 645, 660, 570, 640, 750, 730, 755],
#     [620, 730, 810, 590, 680, 0, 720, 770, 800, 660, 680, 690, 710, 730, 745, 755, 770, 680, 740, 760, 740, 765],
#     [655, 780, 850, 625, 710, 720, 0, 750, 770, 680, 690, 700, 730, 750, 765, 775, 785, 690, 760, 770, 750, 775],
#     [700, 820, 890, 675, 760, 770, 750, 0, 780, 650, 640, 630, 650, 670, 685, 695, 710, 620, 770, 780, 770, 785],
#     [730, 850, 920, 700, 790, 800, 770, 780, 0, 640, 610, 620, 640, 660, 675, 685, 695, 605, 780, 790, 780, 795],
#     [690, 610, 670, 630, 620, 660, 680, 650, 640, 0, 620, 630, 640, 650, 665, 675, 685, 590, 670, 690, 680, 695],
#     [660, 650, 680, 600, 590, 680, 690, 640, 610, 620, 0, 640, 650, 660, 675, 685, 700, 610, 680, 700, 690, 705],
#     [680, 670, 690, 610, 580, 690, 700, 630, 620, 630, 640, 0, 660, 670, 685, 695, 710, 620, 690, 710, 700, 715],
#     [700, 690, 710, 620, 600, 710, 730, 650, 640, 650, 660, 660, 0, 680, 695, 705, 720, 630, 700, 720, 710, 725],
#     [710, 700, 730, 640, 620, 730, 750, 670, 660, 650, 660, 670, 680, 0, 705, 715, 730, 640, 710, 730, 720, 735],
#     [720, 710, 740, 655, 635, 745, 765, 685, 675, 665, 675, 685, 695, 705, 0, 725, 740, 650, 720, 740, 730, 745],
#     [730, 725, 750, 665, 645, 755, 775, 695, 685, 675, 685, 695, 705, 715, 725, 0, 750, 660, 730, 750, 740, 755],
#     [740, 750, 765, 675, 660, 770, 785, 710, 695, 685, 700, 710, 720, 730, 740, 750, 0, 670, 740, 760, 750, 765],
#     [750, 760, 770, 680, 670, 780, 790, 720, 705, 690, 710, 720, 730, 740, 750, 760, 770, 0, 750, 770, 760, 780],
#     [700, 715, 730, 650, 640, 740, 760, 770, 780, 670, 680, 690, 700, 710, 720, 730, 740, 750, 0, 760, 740, 755],
#     [800, 810, 820, 740, 750, 760, 770, 780, 790, 690, 700, 710, 720, 730, 740, 750, 760, 770, 760, 0, 780, 795],
#     [710, 710, 720, 690, 730, 740, 750, 770, 780, 680, 690, 700, 710, 720, 730, 740, 750, 760, 740, 780, 0, 780],
#     [750, 740, 735, 715, 755, 765, 775, 785, 795, 695, 705, 715, 725, 735, 745, 755, 765, 780, 760, 795, 780, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15, 2.05, 1.88, 1.75, 1.80, 1.05, 1.10, 1.12, 1.13, 1.14, 1.15, 1.16, 1.18, 1.08, 1.12, 1.15, 1.20, 1.02],
#     [1.94, 2.62, 1.79, 2.35, 2.20, 1.73, 1.72, 1.70, 1.75, 1.15, 1.20, 1.25, 1.30, 1.35, 1.40, 1.45, 1.48, 1.22, 1.28, 1.35, 1.30, 1.08],
#     [2.58, 1.68, 2.21, 1.90, 2.00, 1.87, 1.82, 1.75, 1.85, 1.10, 1.12, 1.18, 1.20, 1.22, 1.25, 1.30, 1.33, 1.15, 1.20, 1.25, 1.28, 1.00],
#     [1.85, 2.49, 2.07, 1.74, 1.92, 1.98, 1.98, 1.90, 1.95, 1.00, 1.05, 1.08, 1.12, 1.15, 1.18, 1.20, 1.22, 1.09, 1.15, 1.20, 1.18, 1.05],
#     [2.10, 2.35, 2.30, 1.85, 2.10, 1.95, 2.10, 2.05, 2.00, 1.10, 1.15, 1.20, 1.25, 1.30, 1.35, 1.40, 1.45, 1.10, 1.25, 1.30, 1.40, 1.05]
# ])

# S = M = 4
# N = 23
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 10, 8, 10, 9, 8, 9, 8, 9, 10, 9, 10, 10, 9, 10, 9, 10, 8, 9, 10, 9, 9]
# Reqi = [5, 6, 7, 6]
#
# B = np.array([
#     [0, 562, 708, 345, 590, 620, 655, 700, 730, 690, 660, 680, 700, 710, 720, 730, 740, 650, 700, 800, 710, 750, 770],
#     [562, 0, 823, 412, 678, 730, 780, 820, 850, 610, 650, 670, 690, 710, 725, 735, 750, 660, 715, 810, 710, 740, 765],
#     [708, 823, 0, 678, 745, 810, 850, 890, 920, 670, 680, 690, 710, 730, 740, 750, 765, 670, 730, 820, 720, 735, 755],
#     [345, 412, 678, 0, 510, 590, 625, 675, 700, 630, 600, 610, 620, 640, 655, 665, 675, 580, 650, 740, 690, 715, 740],
#     [590, 678, 745, 510, 0, 680, 710, 760, 790, 620, 590, 580, 600, 620, 635, 645, 660, 570, 640, 750, 730, 755, 780],
#     [620, 730, 810, 590, 680, 0, 720, 770, 800, 660, 680, 690, 710, 730, 745, 755, 770, 680, 740, 760, 740, 765, 790],
#     [655, 780, 850, 625, 710, 720, 0, 750, 770, 680, 690, 700, 730, 750, 765, 775, 785, 690, 760, 770, 750, 775, 800],
#     [700, 820, 890, 675, 760, 770, 750, 0, 780, 650, 640, 630, 650, 670, 685, 695, 710, 620, 770, 780, 770, 785, 810],
#     [730, 850, 920, 700, 790, 800, 770, 780, 0, 640, 610, 620, 640, 660, 675, 685, 695, 605, 780, 790, 780, 795, 820],
#     [690, 610, 670, 630, 620, 660, 680, 650, 640, 0, 620, 630, 640, 650, 665, 675, 685, 590, 670, 690, 680, 695, 710],
#     [660, 650, 680, 600, 590, 680, 690, 640, 610, 620, 0, 640, 650, 660, 675, 685, 700, 610, 680, 700, 690, 705, 725],
#     [680, 670, 690, 610, 580, 690, 700, 630, 620, 630, 640, 0, 660, 670, 685, 695, 710, 620, 690, 710, 700, 715, 735],
#     [700, 690, 710, 620, 600, 710, 730, 650, 640, 650, 660, 660, 0, 680, 695, 705, 720, 630, 700, 720, 710, 725, 745],
#     [710, 700, 730, 640, 620, 730, 750, 670, 660, 650, 660, 670, 680, 0, 705, 715, 730, 640, 710, 730, 720, 735, 755],
#     [720, 710, 740, 655, 635, 745, 765, 685, 675, 665, 675, 685, 695, 705, 0, 725, 740, 650, 720, 740, 730, 745, 765],
#     [730, 725, 750, 665, 645, 755, 775, 695, 685, 675, 685, 695, 705, 715, 725, 0, 750, 660, 730, 750, 740, 755, 780],
#     [740, 750, 765, 675, 660, 770, 785, 710, 695, 685, 700, 710, 720, 730, 740, 750, 0, 670, 740, 760, 750, 765, 790],
#     [750, 760, 770, 680, 670, 780, 790, 720, 705, 690, 710, 720, 730, 740, 750, 760, 770, 0, 750, 770, 760, 780, 800],
#     [700, 715, 730, 650, 640, 740, 760, 770, 780, 670, 680, 690, 700, 710, 720, 730, 740, 750, 0, 760, 740, 755, 775],
#     [800, 810, 820, 740, 750, 760, 770, 780, 790, 690, 700, 710, 720, 730, 740, 750, 760, 770, 760, 0, 780, 795, 815],
#     [710, 710, 720, 690, 730, 740, 750, 770, 780, 680, 690, 700, 710, 720, 730, 740, 750, 760, 740, 780, 0, 780, 800],
#     [750, 740, 735, 715, 755, 765, 775, 785, 795, 695, 705, 715, 725, 735, 745, 755, 765, 780, 760, 795, 780, 0, 820],
#     [770, 765, 755, 740, 780, 790, 800, 810, 820, 710, 725, 735, 745, 755, 765, 780, 790, 800, 775, 815, 800, 820, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15, 2.05, 1.88, 1.75, 1.80, 1.05, 1.10, 1.12, 1.13, 1.14, 1.15, 1.16, 1.18, 1.08, 1.12, 1.15, 1.20, 1.02, 1.05],
#     [1.94, 2.62, 1.79, 2.35, 2.20, 1.73, 1.72, 1.70, 1.75, 1.15, 1.20, 1.25, 1.30, 1.35, 1.40, 1.45, 1.48, 1.22, 1.28, 1.35, 1.30, 1.08, 1.15],
#     [2.58, 1.68, 2.21, 1.90, 2.00, 1.87, 1.82, 1.75, 1.85, 1.10, 1.12, 1.18, 1.20, 1.22, 1.25, 1.30, 1.33, 1.15, 1.20, 1.25, 1.28, 1.00, 1.05],
#     [1.85, 2.49, 2.07, 1.74, 1.92, 1.98, 1.98, 1.90, 1.95, 1.00, 1.05, 1.08, 1.12, 1.15, 1.18, 1.20, 1.22, 1.09, 1.15, 1.20, 1.18, 1.05, 1.12],
#     [2.10, 2.35, 2.30, 1.85, 2.10, 1.95, 2.10, 2.05, 2.00, 1.10, 1.15, 1.20, 1.25, 1.30, 1.35, 1.40, 1.45, 1.10, 1.25, 1.30, 1.40, 1.05, 1.20]
# ])

# S = M = 4
# N = 24
# Oi = [8, 6, 9, 7]
# Memj = [8, 10, 10, 8, 10, 9, 8, 9, 8, 9, 10, 9, 10, 10, 9, 10, 9, 10, 8, 9, 10, 9, 9, 8]
# Reqi = [5, 6, 7, 6]
#
# B = np.array([
#     [0, 562, 708, 345, 590, 620, 655, 700, 730, 690, 660, 680, 700, 710, 720, 730, 740, 650, 700, 800, 710, 750, 770, 710],
#     [562, 0, 823, 412, 678, 730, 780, 820, 850, 610, 650, 670, 690, 710, 725, 735, 750, 660, 715, 810, 710, 740, 765, 720],
#     [708, 823, 0, 678, 745, 810, 850, 890, 920, 670, 680, 690, 710, 730, 740, 750, 765, 670, 730, 820, 720, 735, 755, 730],
#     [345, 412, 678, 0, 510, 590, 625, 675, 700, 630, 600, 610, 620, 640, 655, 665, 675, 580, 650, 740, 690, 715, 740, 740],
#     [590, 678, 745, 510, 0, 680, 710, 760, 790, 620, 590, 580, 600, 620, 635, 645, 660, 570, 640, 750, 730, 755, 780, 755],
#     [620, 730, 810, 590, 680, 0, 720, 770, 800, 660, 680, 690, 710, 730, 745, 755, 770, 680, 740, 760, 740, 765, 790, 765],
#     [655, 780, 850, 625, 710, 720, 0, 750, 770, 680, 690, 700, 730, 750, 765, 775, 785, 690, 760, 770, 750, 775, 800, 775],
#     [700, 820, 890, 675, 760, 770, 750, 0, 780, 650, 640, 630, 650, 670, 685, 695, 710, 620, 770, 780, 770, 785, 810, 785],
#     [730, 850, 920, 700, 790, 800, 770, 780, 0, 640, 610, 620, 640, 660, 675, 685, 695, 605, 780, 790, 780, 795, 820, 795],
#     [690, 610, 670, 630, 620, 660, 680, 650, 640, 0, 620, 630, 640, 650, 665, 675, 685, 590, 670, 690, 680, 695, 710, 695],
#     [660, 650, 680, 600, 590, 680, 690, 640, 610, 620, 0, 640, 650, 660, 675, 685, 700, 610, 680, 700, 690, 705, 725, 705],
#     [680, 670, 690, 610, 580, 690, 700, 630, 620, 630, 640, 0, 660, 670, 685, 695, 710, 620, 690, 710, 700, 715, 735, 715],
#     [700, 690, 710, 620, 600, 710, 730, 650, 640, 650, 660, 660, 0, 680, 695, 705, 720, 630, 700, 720, 710, 725, 745, 725],
#     [710, 700, 730, 640, 620, 730, 750, 670, 660, 650, 660, 670, 680, 0, 705, 715, 730, 640, 710, 730, 720, 735, 755, 735],
#     [720, 710, 740, 655, 635, 745, 765, 685, 675, 665, 675, 685, 695, 705, 0, 725, 740, 650, 720, 740, 730, 745, 765, 745],
#     [730, 725, 750, 665, 645, 755, 775, 695, 685, 675, 685, 695, 705, 715, 725, 0, 750, 660, 730, 750, 740, 755, 780, 755],
#     [740, 750, 765, 675, 660, 770, 785, 710, 695, 685, 700, 710, 720, 730, 740, 750, 0, 670, 740, 760, 750, 765, 790, 765],
#     [750, 760, 770, 680, 670, 780, 790, 720, 705, 690, 710, 720, 730, 740, 750, 760, 770, 0, 750, 770, 760, 780, 800, 780],
#     [700, 715, 730, 650, 640, 740, 760, 770, 780, 670, 680, 690, 700, 710, 720, 730, 740, 750, 0, 760, 740, 755, 775, 755],
#     [800, 810, 820, 740, 750, 760, 770, 780, 790, 690, 700, 710, 720, 730, 740, 750, 760, 770, 760, 0, 780, 795, 815, 795],
#     [710, 710, 720, 690, 730, 740, 750, 770, 780, 680, 690, 700, 710, 720, 730, 740, 750, 760, 740, 780, 0, 780, 800, 780],
#     [750, 740, 735, 715, 755, 765, 775, 785, 795, 695, 705, 715, 725, 735, 745, 755, 765, 780, 775, 815, 800, 0, 820, 805],
#     [770, 765, 755, 740, 780, 790, 800, 810, 820, 710, 725, 735, 745, 755, 765, 780, 790, 800, 775, 815, 800, 820, 0, 815],
#     [710, 720, 730, 740, 755, 765, 775, 785, 795, 695, 705, 715, 725, 735, 745, 755, 765, 780, 775, 795, 780, 805, 815, 0]
# ])
#
# T_comp = np.array([
#     [2.31, 1.87, 2.45, 2.02, 2.15, 2.05, 1.88, 1.75, 1.80, 1.05, 1.10, 1.12, 1.13, 1.14, 1.15, 1.16, 1.18, 1.08, 1.12, 1.15, 1.20, 1.02, 1.05, 1.15],
#     [1.94, 2.62, 1.79, 2.35, 2.20, 1.73, 1.72, 1.70, 1.75, 1.15, 1.20, 1.25, 1.30, 1.35, 1.40, 1.45, 1.48, 1.22, 1.28, 1.35, 1.30, 1.08, 1.15, 1.25],
#     [2.58, 1.68, 2.21, 1.90, 2.00, 1.87, 1.82, 1.75, 1.85, 1.10, 1.12, 1.18, 1.20, 1.22, 1.25, 1.30, 1.33, 1.15, 1.20, 1.25, 1.28, 1.00, 1.05, 1.20],
#     [1.85, 2.49, 2.07, 1.74, 1.92, 1.98, 1.98, 1.90, 1.95, 1.00, 1.05, 1.08, 1.12, 1.15, 1.18, 1.20, 1.22, 1.09, 1.15, 1.20, 1.18, 1.05, 1.12, 1.18],
#     [2.10, 2.35, 2.30, 1.85, 2.10, 1.95, 2.10, 2.05, 2.00, 1.10, 1.15, 1.20, 1.25, 1.30, 1.35, 1.40, 1.45, 1.10, 1.25, 1.30, 1.40, 1.05, 1.18, 1.15],
#     [1.90, 2.48, 1.90, 2.05, 2.00, 1.75, 1.82, 1.87, 1.92, 1.15, 1.10, 1.18, 1.20, 1.22, 1.25, 1.30, 1.33, 1.12, 1.20, 1.25, 1.28, 1.08, 1.10, 1.20]
# ])

# 创建模型
model = Model("Pipeline_Model")

# 变量定义
x = model.addVars(M, N, vtype=GRB.BINARY, name="x")
y = model.addVars(N, S, vtype=GRB.BINARY, name="y")
u = model.addVars(N, vtype=GRB.BINARY, name="u")
T_j_s = model.addVars(N, S, vtype=GRB.CONTINUOUS, name="T_j_s")
T_s = model.addVars(S, vtype=GRB.CONTINUOUS, name="T_s")
Th_s = model.addVars(S, vtype=GRB.CONTINUOUS, name="Th_s")
inv_T_j_s = model.addVars(N, S, vtype=GRB.CONTINUOUS, name="inv_T_j_s")
# 引入辅助变量 Th_min 表示最小的阶段吞吐量
Th_min = model.addVar(vtype=GRB.CONTINUOUS, name="Th_min")
# 引入辅助变量来计算每个设备的资源利用率
resource_utilization = model.addVars(N, vtype=GRB.CONTINUOUS, name="resource_utilization")

# 新增关键约束：子模型i只能分配到阶段i的设备
for i in range(M):
    for j in range(N):
        model.addConstr(x[i, j] <= y[j, i], name=f"model_cons_x_{i}_{j}")

# 约束 (1): 设备内存限制
for j in range(N):
    model.addConstr(quicksum(x[i, j] * Reqi[i] for i in range(M)) <= Memj[j])

# 约束 (2): 一个设备最多只能执行一个子模型
for j in range(N):
    model.addConstr(quicksum(x[i, j] for i in range(M)) <= 1)

# 约束 (3): 设备是否被使用
for j in range(N):
    model.addConstr(u[j] <= quicksum(x[i, j] for i in range(M)))
    model.addConstr(u[j] >= quicksum(x[i, j] for i in range(M)) / M)

# 约束 (4): 设备阶段唯一性
for j in range(N):
    model.addConstr(quicksum(y[j, s] for s in range(S)) == u[j])

# 约束 (5): 每个阶段至少有一个设备
for s in range(S):
    model.addConstr(quicksum(y[j, s] for j in range(N)) >= 1)

# 约束 (6): 每个阶段必须处理对应的子模型
for s in range(S):
    model.addConstr(quicksum(x[s, j] * y[j, s] for j in range(N)) >= 1)

# 约束 (7): 仅允许当前阶段处理对应子模型
for s in range(S):
    for j in range(N):
        model.addConstr(quicksum(x[i, j] * y[j, s] for i in range(M) if i != s) == 0)

# 通信约束仅发生在相邻阶段间（i和s=i-1）
z = {}  # 使用字典存储z变量
for i in range(1, M):
    s = i - 1  # 确定对应的阶段
    for j in range(N):
        for j_ in range(N):
            if j == j_:
                continue  # 同一设备无需通信
            # 创建z变量
            z_var = model.addVar(vtype=GRB.BINARY, name=f"z_{i}_{j}_{j_}_{s}")
            z[(i, j, j_, s)] = z_var
            # 线性化约束
            model.addConstr(z_var <= x[i - 1, j], name=f"z_upper1_{i}_{j}_{j_}")
            model.addConstr(z_var <= x[i, j_], name=f"z_upper2_{i}_{j}_{j_}")
            model.addConstr(z_var <= y[j, s], name=f"z_upper3_{i}_{j}_{j_}")
            model.addConstr(z_var <= y[j_, s + 1], name=f"z_upper4_{i}_{j}_{j_}")
            model.addConstr(z_var >= x[i - 1, j] + x[i, j_] + y[j, s] + y[j_, s + 1] - 3,
                            name=f"z_lower_{i}_{j}_{j_}")

# 计算设备在阶段s的执行时间
for j in range(N):
    for s in range(S):
        # 计算时间部分
        comp_time = quicksum(T_comp[i, j] * x[i, j] * y[j, s] for i in range(M))
        # 通信时间部分（仅当s < S-1时）
        comm_time = 0.0
        if s < S - 1:
            i = s + 1  # 当前阶段s对应子模型i-1=s
            comm_time = quicksum(
                z.get((i, j, j_, s), 0) * (Oi[i - 1] / B[j][j_] if B[j][j_] > 0 else 0)
                for j_ in range(N) if j != j_
            )
        model.addConstr(T_j_s[j, s] == comp_time + comm_time)

# inv_T_j_s
for j in range(N):
    for s in range(S):
        # 如果 y[j, s] = 0，则 inv_T_j_s[j, s] = 0
        model.addConstr(inv_T_j_s[j, s] <= y[j, s] * 1e3)  # 大M法，1e3 是一个足够大的常数
        model.addConstr(inv_T_j_s[j, s] >= y[j, s] * 1e-3)  # 避免除零
        # 如果 y[j, s] = 1，则 inv_T_j_s[j, s] = 1 / T_j_s[j, s]
        model.addConstr(inv_T_j_s[j, s] * T_j_s[j, s] == y[j, s])

# 计算阶段吞吐量
for s in range(S):
    model.addConstr(Th_s[s] == quicksum(inv_T_j_s[j, s] for j in range(N)))

# 确保 Th_min 不大于任何一个阶段的吞吐量
for s in range(S):
    model.addConstr(Th_min <= Th_s[s])
Th_total = quicksum(Th_s[s] for s in range(S))
Th_mean = Th_total / S
variance = quicksum((Th_s[s] - Th_mean) ** 2 for s in range(S)) / S
model.setObjective(Th_min, GRB.MAXIMIZE)
# 求解
model.optimize()

# 输出求解时间
print(f"\n求解时间: {model.Runtime:.4f} 秒")

# 结果输出
if model.status == GRB.OPTIMAL:
    print("\n设备阶段分配 (y_j_s):")
    for j in range(N):
        for s in range(S):
            # print("输出 y[j, s] 的值")
            # print(f"y[{j}, {s}] = {y[j, s].x:.0f}")  # 输出 y[j, s] 的值
            if y[j, s].x > 0.5:
                print(f"设备 {j} -> 阶段 {s}")

    print("\n子模型分配 (x_i_j):")
    for i in range(M):
        for j in range(N):
            if x[i, j].x > 0.5:
                print(f"子模型 {i} -> 设备 {j}")

    # 找到吞吐量最小的阶段
    min_throughput = min(Th_s[s].x for s in range(S))  # 找到最小吞吐量
    min_throughput_stage = [s for s in range(S) if Th_s[s].x == min_throughput]  # 找到对应的阶段编号

    print(f"\n吞吐量最小的阶段: 阶段 {min_throughput_stage[0]}")
    print(f"最小吞吐量: {min_throughput:.4f}")

    print("\n每个阶段中每个设备的执行时间和吞吐量:")
    for s in range(S):
        print(f"\n阶段 {s}:")
        for j in range(N):
            if y[j, s].x > 0.5:  # 仅输出属于当前阶段的设备
                exec_time = T_j_s[j, s].x  # 设备 j 在阶段 s 的执行时间
                throughput = inv_T_j_s[j, s].x  # 设备 j 在阶段 s 的吞吐量
                print(f"设备 {j}: 执行时间 = {exec_time:.4f}, 吞吐量 = {throughput:.4f}")

    print("\n每个阶段的吞吐量:")
    for s in range(S):
        print(f"阶段 {s}: 吞吐量 = {Th_s[s].x:.4f}")

    # 输出计算延迟
    total_exec_time = 0
    for s in range(S):
        max_exec_time = max(T_j_s[j, s].x for j in range(N) if y[j, s].x > 0.5)
        total_exec_time += max_exec_time
        print(f"阶段 {s} 的最长执行时间: {max_exec_time:.4f}")

    print(f"\n总执行时间: {total_exec_time:.4f}")

    print("\n每个设备的资源利用率:")
    total_resource_utilization = 0
    for j in range(N):
        utilization = sum(x[i, j].x * Reqi[i] / Memj[j] for i in range(M))
        print(
            f"设备 {j} 的资源利用率: {utilization:.4f} (使用的内存: {sum(x[i, j].x * Reqi[i] for i in range(M)):.2f} GB / 总内存: {Memj[j]:.2f} GB)")
        total_resource_utilization += utilization

    average_resource_utilization = total_resource_utilization / N
    print(f"\n平均资源利用率: {average_resource_utilization:.4f}")


else:
    print("未找到可行解。")
    model.computeIIS()
    model.write("model.ilp")
    print("不可行约束已写入model.ilp文件")
